#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <200>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <350>;
};

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        baseLayer {
            bindings = <
                &kp Q  &kp W  &kp E         &kp R      &kp T        &kp Y        &kp U          &kp I                &kp O       &kp P
                &kp A  &kp S  &kp D         &kp F      &kp G        &kp H        &kp J          &kp K                &kp L       &kp SEMICOLON
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V      &kp B        &kp N        &kp M          &kp COMMA            &kp PERIOD  &kp SLASH      &kp LEFT_CONTROL
                              &lt 3 DELETE  &kp SPACE  &lt 1 TAB    &lt 2 ENTER  &kp BACKSPACE  &mt LEFT_ALT ESCAPE
            >;

            label = "BASE";
        };

        numberLayer {
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &mkp MCLK    &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans
        &kp F11  &kp F1  &kp F2  &kp F3  &mkp RCLK    &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
&trans  &kp F10  &kp F4  &kp F5  &kp F6  &mkp LCLK    &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
                         &trans  &trans  &trans       &trans        &trans        &trans
            >;
        };

        symbolLayer {
            bindings = <
                             &kp SINGLE_QUOTE  &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp HASH     &kp AMPERSAND  &kp SEMICOLON  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT
                             &kp EXCLAMATION   &kp KP_MINUS   &kp KP_PLUS       &kp KP_EQUAL       &kp AT       &kp PIPE       &kp COLON      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION
&mt LEFT_BRACKET LEFT_BRACE  &kp CARET         &kp KP_DIVIDE  &kp ASTRK         &kp BACKSLASH      &kp UNDER    &kp TILDE      &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_WIN  &mt RIGHT_BRACKET RIGHT_BRACE
                                                              &trans            &trans             &trans       &trans         &trans         &trans
            >;
        };

        movementLayer {
            bindings = <
           &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))    &kp C_PREVIOUS  &kp C_PIP          &kp C_PP         &kp C_NEXT  &tog 4
           &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LG(NUMBER_3)      &kp LG(NUMBER_4)      &kp LG(N5)        &kp LEFT        &kp DOWN           &kp UP_ARROW     &kp RIGHT   &trans
&kp LG(Q)  &kp LG(Z)             &kp LG(X)             &kp LG(SPACE)         &kp LG(V)             &kp LG(B)         &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans      &trans  &bt BT_CLR
                                                       &trans                &trans                &trans            &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2
            >;
        };

        gaming {
            bindings = <
       &kp TAB         &kp Q  &kp B    &kp E      &kp T      &trans  &trans  &trans  &trans  &tog 0
       &kp LEFT_SHIFT  &kp A  &kp W    &kp D      &kp G      &trans  &trans  &trans  &trans  &trans
&kp R  &kp Z           &kp X  &kp S    &kp V      &kp B      &trans  &trans  &trans  &trans  &trans  &trans
                              &kp DEL  &kp SPACE  &kp RET    &trans  &trans  &trans
            >;
        };
    };
};
